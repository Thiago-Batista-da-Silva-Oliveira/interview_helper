// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserPlan {
  FREE
  PREMIUM
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  plan      UserPlan @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions      UserSession[]
  usage         UserUsage[]
  interviews    Interview[]
  progress      UserProgress[]
  achievements  UserAchievement[]
  streak        UserStreak?

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserUsage {
  id                   String   @id @default(cuid())
  userId               String
  month                String   // formato: YYYY-MM
  textInterviewsUsed   Int      @default(0)
  audioInterviewsUsed  Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
  @@map("user_usage")
}

enum InterviewType {
  TEXT
  AUDIO
}

enum InterviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Interview {
  id                String          @id @default(cuid())
  userId            String
  type              InterviewType   @default(TEXT)
  status            InterviewStatus @default(PENDING)
  resumeDescription String
  jobDescription    String
  feedback          String?
  insights          String?
  score             Int?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages           Message[]
  interviewQuestions InterviewQuestion[]
  analytics          InterviewAnalytics?

  @@map("interviews")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model Message {
  id          String      @id @default(cuid())
  interviewId String
  role        MessageRole
  content     String
  metadata    String?     // JSON string
  createdAt   DateTime    @default(now())

  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum QuestionCategory {
  FRONTEND
  BACKEND
  FULLSTACK
  MOBILE
  DEVOPS
  DATA_SCIENCE
  SECURITY
  CLOUD
  TESTING
  PRODUCT_MANAGEMENT
  DESIGN
  GENERAL
}

enum QuestionLevel {
  JUNIOR
  PLENO
  SENIOR
  STAFF
  PRINCIPAL
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

model QuestionBank {
  id              String             @id @default(cuid())
  category        QuestionCategory
  level           QuestionLevel
  difficulty      QuestionDifficulty
  question        String
  suggestedAnswer String?            // Resposta sugerida (para admin/refer√™ncia)
  tags            String             // JSON array: ["React", "TypeScript", "Performance"]
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  interviewQuestions InterviewQuestion[]

  @@map("question_bank")
}

model InterviewQuestion {
  id          String   @id @default(cuid())
  interviewId String
  questionId  String
  askedAt     DateTime @default(now())

  interview Interview     @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  question  QuestionBank  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([interviewId, questionId])
  @@map("interview_questions")
}

model Transcription {
  id          String   @id @default(cuid())
  interviewId String   @unique
  audioUrl    String
  textContent String
  createdAt   DateTime @default(now())

  @@map("transcriptions")
}

// ==========================================
// üìä ANALYTICS - Arquitetura Gen√©rica
// ==========================================

model InterviewAnalytics {
  id                   String   @id @default(cuid())
  interviewId          String   @unique

  // Score geral (0-100)
  overallScore         Int

  // M√©tricas de comunica√ß√£o
  communicationQuality Int?     // 0-100
  depthOfKnowledge     Int?     // 0-100
  clarityScore         Int?     // 0-100

  // M√©tricas temporais
  avgResponseTime      Int?     // Segundos
  totalDuration        Int?     // Minutos
  totalMessages        Int      @default(0)

  // Metadata adicional (JSON flex√≠vel)
  metadata             String?  // Ex: { "nervousness": "low", "confidence": "high" }

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  interview         Interview          @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  categoryScores    CategoryScore[]
  difficultyScores  DifficultyScore[]

  @@map("interview_analytics")
}

model CategoryScore {
  id                String           @id @default(cuid())
  analyticsId       String
  category          QuestionCategory
  score             Int              // 0-100

  // M√©tricas adicionais
  questionsAnswered Int              @default(0)
  questionsCorrect  Int              @default(0)

  analytics         InterviewAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, category])
  @@map("category_scores")
}

model DifficultyScore {
  id                String             @id @default(cuid())
  analyticsId       String
  difficulty        QuestionDifficulty
  score             Int                // 0-100

  questionsAnswered Int                @default(0)

  analytics         InterviewAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)

  @@unique([analyticsId, difficulty])
  @@map("difficulty_scores")
}

// ==========================================
// üìà PROGRESSO DO USU√ÅRIO
// ==========================================

model UserProgress {
  id              String   @id @default(cuid())
  userId          String
  month           String   // YYYY-MM

  // M√©tricas agregadas
  avgScore        Float
  totalInterviews Int

  // Padr√µes identificados (JSON)
  weaknesses      String   // JSON array de categorias
  strengths       String   // JSON array de categorias

  // Tend√™ncia
  trend           String   // "improving" | "stable" | "declining"

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryProgress CategoryProgress[]

  @@unique([userId, month])
  @@map("user_progress")
}

model CategoryProgress {
  id         String           @id @default(cuid())
  progressId String
  category   QuestionCategory
  count      Int              @default(0)
  avgScore   Float            @default(0)

  progress   UserProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([progressId, category])
  @@map("category_progress")
}

// ==========================================
// üèÜ GAMIFICA√á√ÉO
// ==========================================

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String   // ID da conquista (enum ou tabela separada)
  unlockedAt    DateTime @default(now())

  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserStreak {
  id            String   @id @default(cuid())
  userId        String   @unique
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActiveAt  DateTime

  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_streaks")
}
