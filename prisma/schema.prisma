// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserPlan {
  FREE
  PREMIUM
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  plan      UserPlan @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions   UserSession[]
  usage      UserUsage[]
  interviews Interview[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserUsage {
  id                   String   @id @default(cuid())
  userId               String
  month                String   // formato: YYYY-MM
  textInterviewsUsed   Int      @default(0)
  audioInterviewsUsed  Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
  @@map("user_usage")
}

enum InterviewType {
  TEXT
  AUDIO
}

enum InterviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Interview {
  id                String          @id @default(cuid())
  userId            String
  type              InterviewType   @default(TEXT)
  status            InterviewStatus @default(PENDING)
  resumeDescription String
  jobDescription    String
  feedback          String?
  insights          String?
  score             Int?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages           Message[]
  interviewQuestions InterviewQuestion[]

  @@map("interviews")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model Message {
  id          String      @id @default(cuid())
  interviewId String
  role        MessageRole
  content     String
  metadata    String?     // JSON string
  createdAt   DateTime    @default(now())

  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum QuestionCategory {
  FRONTEND
  BACKEND
  FULLSTACK
  MOBILE
  DEVOPS
  DATA_SCIENCE
  SECURITY
  CLOUD
  TESTING
  PRODUCT_MANAGEMENT
  DESIGN
  GENERAL
}

enum QuestionLevel {
  JUNIOR
  PLENO
  SENIOR
  STAFF
  PRINCIPAL
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

model QuestionBank {
  id              String             @id @default(cuid())
  category        QuestionCategory
  level           QuestionLevel
  difficulty      QuestionDifficulty
  question        String
  suggestedAnswer String?            // Resposta sugerida (para admin/referÃªncia)
  tags            String             // JSON array: ["React", "TypeScript", "Performance"]
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  interviewQuestions InterviewQuestion[]

  @@map("question_bank")
}

model InterviewQuestion {
  id          String   @id @default(cuid())
  interviewId String
  questionId  String
  askedAt     DateTime @default(now())

  interview Interview     @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  question  QuestionBank  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([interviewId, questionId])
  @@map("interview_questions")
}

model Transcription {
  id          String   @id @default(cuid())
  interviewId String   @unique
  audioUrl    String
  textContent String
  createdAt   DateTime @default(now())

  @@map("transcriptions")
}
